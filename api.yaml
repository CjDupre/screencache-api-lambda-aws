openapi: "3.0.0"
info:
  title: Screen Cache API
  description: Screen Cache Serverless API
  version: 1.0.0
servers:
  - url: https://www.screencache.io/api/v1
paths:
  /account/validate:
    post:
      summary: Validate account
      operationId: validateAccount
      parameters:
        - name: CSRF-Token
          in: header
          schema:
            type: string
          required: true
          description: Request verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateAccountRequest"
            example:
              username: "xxx"
              nickname: "xxx"
              password: "xxx"
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateAccountResponse"
              example:
                nickname_result:
                  valid: false
                username_result:
                  valid: true
                password_result:
                  valid: false
                  score: 0
                  feedback:
                      warning: "Repeats like \"aaa\" are easy to guess"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "The header 'CSRF-Token' is missing or invalid"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account/change-password:
    post:
      summary: Change password
      operationId: changePassword
      security:
        - bearerAuth: []
      parameters:
        - name: CSRF-Token
          in: header
          schema:
            type: string
          required: true
          description: Request verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
            example:
              password: "new password"
      responses:
        '204':
          description: Password changed successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                CSRF token missing or invalid:
                  error: "invalid_request"
                  error_description: "The header 'CSRF-Token' is missing or invalid"
                Password is required:
                  error: "invalid_request"
                  error_description: "The field 'password' is required"
                Password is too long:
                  error: "invalid_request"
                  error_description: "The field 'password' is too long"
                Password is insecure:
                  error: "invalid_request"
                  error_description: "This password does not meet password strength requirements"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account/reset-password:
    post:
      summary: Reset password
      operationId: resetPassword
      parameters:
        - name: CSRF-Token
          in: header
          schema:
            type: string
          required: true
          description: Request verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
            example:
              password_reset_token: "xxx"
              new_password: "xxx"
      responses:
        '200':
          description: Access Token Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedResponse"
              example:
                access_token: "xxx"
                token_type: "Bearer"
                expires_in: 36000
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                CSRF token missing or invalid:
                  error: "invalid_request"
                  error_description: "The header 'CSRF-Token' is missing or invalid"
                Token missing or invalid:
                  error: "invalid_request"
                  error_description: "The field 'password_reset_token' is missing or invalid"
                Token expired:
                  error: "invalid_request"
                  error_description: "This token has expired"
                Password is required:
                  error: "invalid_request"
                  error_description: "The field 'password' is required"
                Password is insecure:
                  error: "invalid_request"
                  error_description: "This password does not meet password strength requirements"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account/recover-password:
    post:
      summary: Request a password recovery email
      operationId: recoverPassword
      parameters:
        - name: CSRF-Token
          in: header
          schema:
            type: string
          required: true
          description: Request verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecoverPasswordRequest"
            example:
              username: "email@domain.com"
      responses:
        '204':
          description: Password recovery request received
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                CSRF token missing or invalid:
                  error: "invalid_request"
                  error_description: "The header 'CSRF-Token' is missing or invalid"
                Username is required:
                  error: "invalid_request"
                  error_description: "The field 'username' is required"
                Username is too long:
                  error: "invalid_request"
                  error_description: "The field 'username' is too long"
                No such user:
                  error: "invalid_request"
                  error_description: "This username is not associated with an existing account"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account/signup:
    post:
      summary: Create a new account
      operationId: signup
      parameters:
        - name: CSRF-Token
          in: header
          schema:
            type: string
          required: true
          description: Request verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
            example:
              nickname: "xxx"
              username: "email@domain.com"
              password: "secret"
      responses:
        '200':
          description: Access Token Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedResponse"
              example:
                access_token: "xxx"
                token_type: "Bearer"
                expires_in: 360000
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                CSRF token missing or invalid:
                  error: "invalid_request"
                  error_description: "The header 'CSRF-Token' is missing or invalid"
                Username is required:
                  error: "invalid_request"
                  error_description: "The field 'username' is required"
                Username is invalid:
                  error: "invalid_request"
                  error_description: "The field 'username' is not a valid email"
                Username is too long:
                  error: "invalid_request"
                  error_description: "The field 'username' is too long"
                Password is required:
                  error: "invalid_request"
                  error_description: "The field 'password' is required"
                Password is too long:
                  error: "invalid_request"
                  error_description: "The field 'password' is too long"
                Password is insecure:
                  error: "invalid_request"
                  error_description: "This password does not meet the complexity requirements"
                Email already registered:
                  error: "invalid_request"
                  error_description: "This email is already associated with an existing account"
                Nickname is invalid:
                  error: "invalid_request"
                  error_description: "The field 'nickname' contains invalid characters"
                Nickname is too long:
                  error: "invalid_request"
                  error_description: "The field 'nickname' is too long"
                Nickname is already taken:
                  error: "invalid_request"
                  error_description: "This nickname is already taken"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account/logout:
    post:
      summary: Logout
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User logged out
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account/login:
    post:
      summary: Login
      operationId: login
      parameters:
        - name: CSRF-Token
          in: header
          required: true
          description: The request verification token
          schema:
            type: string
      requestBody:
        description: Password Grant Request
        content:
          application/json:
            schema:
              $ref: "#/components/schema/LoginRequest"
            example:
              grant_type: "password"
              username: "email@domain.com"
              password: "secret"
      responses:
        '200':
          description: Access Token Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizedResponse"
              example:
                access_token: "xxx"
                token_type: "Bearer"
                expires_in: 360000
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                CSRF Token missing or invalid:
                  error: "invalid_request"
                  error_description: "The header 'CSRF-Token' is missing or invalid"
                Unsupported grant type:
                  error: "invalid_request"
                  error_description: "Unsupported grant_type"
                Username is required:
                  error: "invalid_request"
                  error_description: "The field 'username' is required"
                Password is required:
                  error: "invalid_request"
                  error_description: "The field 'password' is required"
                Username is invalid:
                  error: "invalid_request"
                  error_description: "The field 'username' must be a valid email"
                Username is too long:
                  error: "invalid_request"
                  error_description: "The field 'username' is too long"
                Password is too long:
                  error: "invalid_request"
                  error_description: "The field 'password' is too long"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /account:
    delete:
      summary: Delete account
      operationId: deleteAccount
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
    put:
      summary: Update logged in user info
      operationId: updateAccount
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountRequest"
            example:
              username: "xxx"
              nickname: "xxx"
      responses:
        '204':
          description: Account updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Nickname is invalid:
                  error: "invalid_request"
                  error_description: "The field 'nickname' contains invalid characters"
                Nickname is too long:
                  error: "invalid_request"
                  error_description: "The field 'nickname' is too long"
                Nickname is not unique:
                  error: "invalid_request"
                  error_description: "This nickname is already taken"
                Avatar URL invalid:
                  error: "invalid_request"
                  error_description: "The field 'avatar_url' does not refer to a valid uploaded image"
                Bio is too long:
                  error: "invalid_request"
                  error_description: "The field 'bio' is too long"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
    get:
      summary: Retrieve logged in user info
      operationId: getAccount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAccountResponse"
              example:
                user:
                  id: "xxx"
                  nickname: "xxx"
                  username: "email@domain.com"
                csrf_token: "xxx"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid Authorization header or Bearer token"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /users/{userId}/posts/{postId}:
    delete:
      summary: Delete a user post.
      operationId: deletePost
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to create a post for
          schema:
            type: integer
            format: int32
        - name: postId
          in: path
          required: true
          description: The id of the post to get details for
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Post updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '404':
          description: User or post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User does not exist:
                  error: "not_found"
                  error_description: "A user with this Id does not exist"
                Post does not exist:
                  error: "not_found"
                  error_description: "A post with this Id does not exist"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
    put:
      summary: Update user post.
      operationId: updatePost
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to create a post for
          schema:
            type: integer
            format: int32
        - name: postId
          in: path
          required: true
          description: The id of the post to get details for
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update post content
        content:
          application/json:
            schema:
              $ref: "#/components/schema/PostUpdateRequest"
            example:
              text: "xxx"
      responses:
        '204':
          description: Post updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "The field 'text' is too long"
        '404':
          description: User or post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User does not exist:
                  error: "not_found"
                  error_description: "A user with this Id does not exist"
                Post does not exist:
                  error: "not_found"
                  error_description: "A post with this Id does not exist"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
    get:
      summary: Get user post details.
      operationId: getPost
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to create a post for
          schema:
            type: integer
            format: int32
        - name: postId
          in: path
          required: true
          description: The id of the post to get details for
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostDetailsResponse"
              example:
                id: 1234
                time_stamp: 999999
                image_url: "xxx"
                text: "xxx"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                User does not exist:
                  error: "not_found"
                  error_description: "A user with this Id does not exist"
                Post does not exist:
                  error: "not_found"
                  error_description: "A post with this Id does not exist"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /users/{userId}/posts:
    post:
      summary: Create a new post.
      operationId: createPost
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to create a post for
          schema:
            type: integer
            format: int32
      requestBody:
        description: New post contents
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPostRequest"
            example:
              image_url: "xxx"
              text: "xxx"
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddPostResponse"
              example:
                id: 1234
                time_stamp: 999999
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "not_found"
                error_description: "A user with this Id does not exist"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Image URL is missing or invalid:
                  error: "invalid_request"
                  error_description: "The field 'image_url' is missing or invalid"
                Image is missing or invalid:
                  error: "invalid_request"
                  error_description: "The image specified by 'image_url' does not exist"
                Text is too long:
                  error: "invalid_request"
                  error_description: "The field 'text' is too long"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
    get:
      summary: List user posts.
      operationId: listPosts
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to list posts for
          schema:
            type: integer
            format: int32
        - name: q
          in: query
          description: Search criteria for filtering posts including logical search operators that join search keywords
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The 1-based page index when paginating (max 100, default 1)
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: How many items to return at one time (max 100, default 50)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged dictionary of posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostsResponse"
              example:
                page: 1
                limit: 50
                pages: 5
                posts:
                  1234:
                    id: 1234
                    time_stamp: 999999
                    image_url: "xxx"
                    text: "xxx"
                  5678:
                    id: 5678
                    time_stamp: 999999
                    image_url: "xxx"
                    text: "xxx"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "not_found"
                error_description: "A user with this Id does not exist"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Parameter q is too long:
                  error: "invalid_request"
                  error_description: "The query parameter 'q' is too long"
                Parameter q contains invalid characters:
                  error: "invalid_request"
                  error_description: "The query parameter 'q' contains invalid characters"
                Parameter page must be a number greater than 0:
                  error: "invalid_request"
                  error_description: "The query parameter 'page' must be a number greater than 0"
                Parameter limit must be greater than 0:
                  error: "invalid_request"
                  error_description: "The query parameter 'limit' must be a number greater than 0"
                Parameter limit must be max 100:
                  error: "invalid_request"
                  error_description: "The query parameter 'limit' must be a number less than or equal to 100"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /users/{userId}/friends/{friendId}:
    delete:
      summary: Remove a friend.
      operationId: removeFriend
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to remove a friend for
          schema:
            type: string
        - name: friendId
          in: path
          required: true
          description: The id of the user to remove from friends
          schema:
            type: string
      responses:
        '204':
          description: Friend removed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '404':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: 'not_found'
                error_description: 'A friend with this Id does not exist'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /users/{userId}/friends:
    post:
      summary: Add a friend.
      operationId: addFriend
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to list friends for
          schema:
            type: string
      requestBody:
        description: Specify a user to add as a friend
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddFriendRequest"
            example:
              id: 123
      responses:
        '204':
          description: Friend request sent
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: 'invalid_request'
                error_description: 'Cannot add a friend because a user with this id does not exist'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
    get:
      summary: List user friends.
      operationId: listFriends
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to list friends for
          schema:
            type: string
        - name: q
          in: query
          description: Friend name query, returns friends containing this keyword in their name when specified (not empty or whitespace)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The 1-based page index when paginating (max 100, default 1)
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: How many items to return at one time (max 100, default 50)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged dictionary of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
              example:
                page: 1
                limit: 50
                pages: 5
                users:
                  123:
                    id: 123
                    nickname: "user1"
                    avatar_url: "xxx"
                  456:
                    id: 456
                    nickname: "user2"
                    avatar_url: "xxx"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Parameter q is too long:
                  error: "invalid_request"
                  error_description: "The query parameter 'q' is too long"
                Parameter q contains invalid characters:
                  error: "invalid_request"
                  error_description: "The query parameter 'q' contains invalid characters"
                Parameter page must be a number greater than 0:
                  error: "invalid_request"
                  error_description: "The query parameter 'page' must be a number greater than 0"
                Parameter limit must be greater than 0:
                  error: "invalid_request"
                  error_description: "The query parameter 'limit' must be a number greater than 0"
                Parameter limit must be max 100:
                  error: "invalid_request"
                  error_description: "The query parameter 'limit' must be a number less than or equal to 100"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"

  /users/{userId}/images:
    post:
      summary: Upload an image.
      operationId: uploadImage
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to upload the image for, must be the current user
          schema:
            type: string
      requestBody:
        description: The image to upload
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
              example:
                image_id:
                  type: string
                  description: The Id of the uploaded image
                image_url:
                  type: string
                  description: The URL of the uploaded image on S3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Image missing or invalid:
                  error: "invalid_request"
                  error_description: "The field 'image' is missing or invalid"
                Image too large:
                  error: "invalid_request"
                  error_description: "This image was too large to upload, maximum size is 2 MB"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /users/{userId}:
    get:
      summary: Retrieve user details.
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The id of the user to retrieve details for
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsResponse'
              example:
                id: 123
                nickname: "xxx"
                avatar_url: "xxx"
                bio: "xxx"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "The user id is invalid"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "not_found"
                error_description: "This user does not exist"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
  /users:
    get:
      summary: Lists all users
      operationId: listUsers
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: User name query, returns users containing this keyword in their name when specified (not empty or whitespace)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The 1-based page index when paginating (max 100, default 1)
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: How many items to return at one time (max 100, default 50)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged dictionary of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
              example:
                page: 1
                limit: 50
                pages: 5
                users:
                  123:
                    id: 123
                    nickname: "user1"
                    avatar_url: "xxx"
                  456:
                    id: 456
                    nickname: "user2"
                    avatar_url: "xxx"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "invalid_request"
                error_description: "Invalid or missing Authorization header or Bearer token"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Parameter q is too long:
                  error: "invalid_request"
                  error_description: "The query parameter 'q' is too long"
                Parameter q contains invalid characters:
                  error: "invalid_request"
                  error_description: "The query parameter 'q' contains invalid characters"
                Parameter page must be a number greater than 0:
                  error: "invalid_request"
                  error_description: "The query parameter 'page' must be a number greater than 0"
                Parameter limit must be greater than 0:
                  error: "invalid_request"
                  error_description: "The query parameter 'limit' must be a number greater than 0"
                Parameter limit must be max 100:
                  error: "invalid_request"
                  error_description: "The query parameter 'limit' must be a number less than or equal to 100"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "server_error"
                error_description: "The server was unable to process this request"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ValidateAccountResponse:
      type: object
      required:
        - nickname_result
        - username_result
        - password_result
      properties:
        nickname_result:
          type: object
          description: The nickname validation result
          required:
            - valid
          properties:
            valid:
              type: boolean
              description: Whether the nickname is unique
        username_result:
          type: object
          description: The username validation result
          required:
            - valid
          properties:
            valid:
              type: boolean
              description: Whether the username is unique
        password_result:
          type: object
          description: The username validation result
          required:
            - valid
            - score
            - feedback
          properties:
            valid:
              type: boolean
              description: Whether the password satisfies strength requirementes
            score:
              type: integer
              format: int32
              description: The password score used to visually display password strength
            feedback:
              type: object
              description: The password feedback that can be displayed in the UI
              properties:
                warning:
                  type: string
                  description: The reason for password score
                suggestions:
                  type: array
                  description: Suggestions for improving the password score
    ValidateAccountRequest:
      type: object
      required:
        - username
        - nickname
        - password
      properties:
        username:
          type: string
          description: Check if the username is valid
        nickname:
          type: string
          description: Check if the nickname is valid
        password:
          type: string
          description: Check password strength score
    LoginRequest:
      type: object
      required:
        - grant_type
        - username
        - password
      properties:
        grant_type:
          type: string
          description: The OAuth grant type, should be set to 'password'
        username:
          type: string
          description: The account username, should be a valid email
        password:
          type: string
          description: The account password
    UpdateAccountRequest:
      type: object
      required:
        - nickname
        - avatar_url
      properties:
        nickname:
          type: string
          description: The unique nickname to update
        avatar_url:
          type: string
          description: The avatar URL to set
        bio:
          type: string
          description: The bio blurb to set
    ChangePasswordRequest:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: The new password to set
    ResetPasswordRequest:
      type: object
      required:
        - password_reset_token
        - new_password
      properties:
        password_reset_token:
          type: string
          description: The password reset token sent in recovery email
        new_password:
          type: string
          description: The new password to set
    RecoverPasswordRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: The username for which to recover password
    SignupRequest:
      type: object
      required:
        - nickname
        - username
        - password
      properties:
        nickname:
          type: string
          description: The new user's unique nickname
        username:
          type: string
          description: The new user's unique email
        password:
          type: string
          description: The new user's password that meets password strength requirements
    AuthorizedResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: The Bearer token that can be passed to requests that require authentication
        token_type:
          type: string
          description: The token type identifying the token as a Bearer token
        expires_in:
          type: integer
          format: int32
          description: The number of seconds until this token expires
    GetAccountResponse:
      type: object
      required:
        - csrf_token
      properties:
        user:
          type: object
          required:
            - id
            - nickname
            - username
          properties:
            id:
              type: string
              description: The logged in user Id
            nickname:
              type: string
              description: The logged in user's nickname
            username:
              type: string
              description: The logged in user's username (which is also the email)
    PostUpdateRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: The post text content
    PostDetailsResponse:
      type: object
      required:
        - id
        - time_stamp
        - image_url
        - text
      properties:
        id:
          type: integer
          format: int32
          description: The unique post Id across all users
        time_stamp:
          type: integer
          format: int32
          description: The unix epoch date/time stamp of when the post was created on the server
        image_url:
          type: string
          description: The post image URL
        text:
          type: string
          description: The text that annotates the post image
    AddPostRequest:
      type: object
      required:
        - image_url
      properties:
        image_url:
          type: string
          description: The URL of the post image on S3
        text:
          type: string
          description: The text that annotates the post
    AddPostResponse:
      type: object
      required:
        - id
        - time_stamp
      properties:
        id:
          type: integer
          format: int32
          description: The Id of the created post
        time_stamp:
          type: integer
          format: int32
          description: The Unix epoch date/time stamp of when the post was created on the server
    AddFriendRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
    ImageUploadRequest:
      type: object
      required:
        - image
      properties:
        image:
          type: object
          required:
            - uri
            - name
            - type
          properties:
            uri:
              type: string
            name:
              type: string
              format: binary
            type:
              type: string
    ImageUploadResponse:
      type: object
      required:
        - image_id
        - image_url
      properties:
        image_id:
          type: string
          description: The unique Id assigned to the image after upload
        image_url:
          type: string
          description: The URL of the uploaded image on S3
    ErrorResponse:
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
          description: The error code
        error_description:
          type: string
          description: The error description
    UserDetailsResponse:
      type: object
      required:
        - id
        - nickname
        - avatar_url
        - bio
      properties:
        id:
          type: integer
          description: The user id
        nickname:
          type: string
          description: The user nickname
        avatar_url:
          type: string
          description: The avatar image URL on S3
        bio:
          type: string
          description: The user bio blurb
    PostsResponse:
      type: object
      required:
        - page
        - limit
        - pages
        - order
        - posts
      properties:
        page:
          type: integer
          description: The requested page number
        limit:
          type: integer
          description: The max items returned per page
        pages:
          type: integer
          description: The total pages available
        posts:
          type: object
          additionalProperties:
            type: object
            required:
              - id
              - time_stamp
              - image_url
              - text
            properties:
              id:
                type: string
                description: The post Id
              time_stamp:
                type: integer
                format: int32
                description: The Unix epoch data/time stamp
              image_url:
                type: string
                description: The image associated with the post
              text:
                type: string
                description: The text that annotates the post image
    UsersResponse:
      type: object
      required:
        - page
        - limit
        - pages
        - users
      properties:
        page:
          type: integer
          description: The requested page number
        limit:
          type: integer
          description: The max items returned per page
        pages:
          type: integer
          description: The total pages available
        users:
          type: object
          additionalProperties:
            type: object
            required:
              - id
              - nickname
              - avatar_rl
            properties:
              id:
                type: integer
                description: The user Id
              nickname:
                type: string
                description: The user nickname
              avatar_url:
                type: string
                description: The user avatar URL from S3
